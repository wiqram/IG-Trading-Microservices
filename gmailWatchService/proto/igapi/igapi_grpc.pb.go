// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package igapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IgSvcClient is the client API for IgSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IgSvcClient interface {
	TradeAction(ctx context.Context, in *OpenTradeRequest, opts ...grpc.CallOption) (*TradeResponse, error)
	TestAccountTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error)
	TestClassifierTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error)
	TestDictionaryTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error)
	TestAnalysisTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error)
	CreatePosition(ctx context.Context, in *OTCOrderRequest, opts ...grpc.CallOption) (*OTCOrderResponse, error)
	GetConfirmationDetails(ctx context.Context, in *OTCOrderResponse, opts ...grpc.CallOption) (*ConfirmationResponse, error)
	GetClientSentiment(ctx context.Context, in *ClientSentimentRequest, opts ...grpc.CallOption) (*ClientSentimentResponse, error)
	OpenLightStreamerSubscription(ctx context.Context, in *LightStreamerSubRequest, opts ...grpc.CallOption) (IgSvc_OpenLightStreamerSubscriptionClient, error)
}

type igSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewIgSvcClient(cc grpc.ClientConnInterface) IgSvcClient {
	return &igSvcClient{cc}
}

func (c *igSvcClient) TradeAction(ctx context.Context, in *OpenTradeRequest, opts ...grpc.CallOption) (*TradeResponse, error) {
	out := new(TradeResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/tradeAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) TestAccountTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error) {
	out := new(TextRazorResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/testAccountTextRazor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) TestClassifierTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error) {
	out := new(TextRazorResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/testClassifierTextRazor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) TestDictionaryTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error) {
	out := new(TextRazorResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/testDictionaryTextRazor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) TestAnalysisTextRazor(ctx context.Context, in *TextRazorRequest, opts ...grpc.CallOption) (*TextRazorResponse, error) {
	out := new(TextRazorResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/testAnalysisTextRazor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) CreatePosition(ctx context.Context, in *OTCOrderRequest, opts ...grpc.CallOption) (*OTCOrderResponse, error) {
	out := new(OTCOrderResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/createPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) GetConfirmationDetails(ctx context.Context, in *OTCOrderResponse, opts ...grpc.CallOption) (*ConfirmationResponse, error) {
	out := new(ConfirmationResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/getConfirmationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) GetClientSentiment(ctx context.Context, in *ClientSentimentRequest, opts ...grpc.CallOption) (*ClientSentimentResponse, error) {
	out := new(ClientSentimentResponse)
	err := c.cc.Invoke(ctx, "/demo_igapi.IgSvc/getClientSentiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *igSvcClient) OpenLightStreamerSubscription(ctx context.Context, in *LightStreamerSubRequest, opts ...grpc.CallOption) (IgSvc_OpenLightStreamerSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IgSvc_serviceDesc.Streams[0], "/demo_igapi.IgSvc/openLightStreamerSubscription", opts...)
	if err != nil {
		return nil, err
	}
	x := &igSvcOpenLightStreamerSubscriptionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IgSvc_OpenLightStreamerSubscriptionClient interface {
	Recv() (*LightStreamerSubResponse, error)
	grpc.ClientStream
}

type igSvcOpenLightStreamerSubscriptionClient struct {
	grpc.ClientStream
}

func (x *igSvcOpenLightStreamerSubscriptionClient) Recv() (*LightStreamerSubResponse, error) {
	m := new(LightStreamerSubResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IgSvcServer is the server API for IgSvc service.
// All implementations must embed UnimplementedIgSvcServer
// for forward compatibility
type IgSvcServer interface {
	TradeAction(context.Context, *OpenTradeRequest) (*TradeResponse, error)
	TestAccountTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error)
	TestClassifierTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error)
	TestDictionaryTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error)
	TestAnalysisTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error)
	CreatePosition(context.Context, *OTCOrderRequest) (*OTCOrderResponse, error)
	GetConfirmationDetails(context.Context, *OTCOrderResponse) (*ConfirmationResponse, error)
	GetClientSentiment(context.Context, *ClientSentimentRequest) (*ClientSentimentResponse, error)
	OpenLightStreamerSubscription(*LightStreamerSubRequest, IgSvc_OpenLightStreamerSubscriptionServer) error
	mustEmbedUnimplementedIgSvcServer()
}

// UnimplementedIgSvcServer must be embedded to have forward compatible implementations.
type UnimplementedIgSvcServer struct {
}

func (UnimplementedIgSvcServer) TradeAction(context.Context, *OpenTradeRequest) (*TradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAction not implemented")
}
func (UnimplementedIgSvcServer) TestAccountTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAccountTextRazor not implemented")
}
func (UnimplementedIgSvcServer) TestClassifierTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestClassifierTextRazor not implemented")
}
func (UnimplementedIgSvcServer) TestDictionaryTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestDictionaryTextRazor not implemented")
}
func (UnimplementedIgSvcServer) TestAnalysisTextRazor(context.Context, *TextRazorRequest) (*TextRazorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestAnalysisTextRazor not implemented")
}
func (UnimplementedIgSvcServer) CreatePosition(context.Context, *OTCOrderRequest) (*OTCOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePosition not implemented")
}
func (UnimplementedIgSvcServer) GetConfirmationDetails(context.Context, *OTCOrderResponse) (*ConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfirmationDetails not implemented")
}
func (UnimplementedIgSvcServer) GetClientSentiment(context.Context, *ClientSentimentRequest) (*ClientSentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientSentiment not implemented")
}
func (UnimplementedIgSvcServer) OpenLightStreamerSubscription(*LightStreamerSubRequest, IgSvc_OpenLightStreamerSubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenLightStreamerSubscription not implemented")
}
func (UnimplementedIgSvcServer) mustEmbedUnimplementedIgSvcServer() {}

// UnsafeIgSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IgSvcServer will
// result in compilation errors.
type UnsafeIgSvcServer interface {
	mustEmbedUnimplementedIgSvcServer()
}

func RegisterIgSvcServer(s grpc.ServiceRegistrar, srv IgSvcServer) {
	s.RegisterService(&_IgSvc_serviceDesc, srv)
}

func _IgSvc_TradeAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).TradeAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/tradeAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).TradeAction(ctx, req.(*OpenTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_TestAccountTextRazor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRazorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).TestAccountTextRazor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/testAccountTextRazor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).TestAccountTextRazor(ctx, req.(*TextRazorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_TestClassifierTextRazor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRazorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).TestClassifierTextRazor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/testClassifierTextRazor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).TestClassifierTextRazor(ctx, req.(*TextRazorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_TestDictionaryTextRazor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRazorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).TestDictionaryTextRazor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/testDictionaryTextRazor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).TestDictionaryTextRazor(ctx, req.(*TextRazorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_TestAnalysisTextRazor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextRazorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).TestAnalysisTextRazor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/testAnalysisTextRazor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).TestAnalysisTextRazor(ctx, req.(*TextRazorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_CreatePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTCOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).CreatePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/createPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).CreatePosition(ctx, req.(*OTCOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_GetConfirmationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTCOrderResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).GetConfirmationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/getConfirmationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).GetConfirmationDetails(ctx, req.(*OTCOrderResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_GetClientSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientSentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IgSvcServer).GetClientSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo_igapi.IgSvc/getClientSentiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IgSvcServer).GetClientSentiment(ctx, req.(*ClientSentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IgSvc_OpenLightStreamerSubscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LightStreamerSubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IgSvcServer).OpenLightStreamerSubscription(m, &igSvcOpenLightStreamerSubscriptionServer{stream})
}

type IgSvc_OpenLightStreamerSubscriptionServer interface {
	Send(*LightStreamerSubResponse) error
	grpc.ServerStream
}

type igSvcOpenLightStreamerSubscriptionServer struct {
	grpc.ServerStream
}

func (x *igSvcOpenLightStreamerSubscriptionServer) Send(m *LightStreamerSubResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _IgSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo_igapi.IgSvc",
	HandlerType: (*IgSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "tradeAction",
			Handler:    _IgSvc_TradeAction_Handler,
		},
		{
			MethodName: "testAccountTextRazor",
			Handler:    _IgSvc_TestAccountTextRazor_Handler,
		},
		{
			MethodName: "testClassifierTextRazor",
			Handler:    _IgSvc_TestClassifierTextRazor_Handler,
		},
		{
			MethodName: "testDictionaryTextRazor",
			Handler:    _IgSvc_TestDictionaryTextRazor_Handler,
		},
		{
			MethodName: "testAnalysisTextRazor",
			Handler:    _IgSvc_TestAnalysisTextRazor_Handler,
		},
		{
			MethodName: "createPosition",
			Handler:    _IgSvc_CreatePosition_Handler,
		},
		{
			MethodName: "getConfirmationDetails",
			Handler:    _IgSvc_GetConfirmationDetails_Handler,
		},
		{
			MethodName: "getClientSentiment",
			Handler:    _IgSvc_GetClientSentiment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "openLightStreamerSubscription",
			Handler:       _IgSvc_OpenLightStreamerSubscription_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "igapi/igapi.proto",
}
